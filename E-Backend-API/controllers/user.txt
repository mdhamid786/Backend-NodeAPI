const User = require("../models/userModel");
const Cart = require("../models/cartModel");
const Product = require("../models/productModel");
const Order = require("../models/orderModel");
const Coupon = require("../models/couponModel");
const ErrorHandler = require("../utils/errorhandler");
const asyncHandler = require("express-async-handler");
const crypto = require("crypto")
const jwtToken = require("../utils/jwtToken");
const { generateRefreshToken } = require("../config/refreshtoken");


const jwt = require("jsonwebtoken");
const uniqid = require("uniqid");
const validateMongoDbId = require("../utils/validateMongodbId");

// const createUser = asyncHandler(async (req, res) => {
//   const email = req.body.email;
//   const findUser = await User.findOne({ email: email });

//   if (!findUser) {
//     const newUser = await User.create(req.body);
//     res.json(newUser);
//   } else {
//     throw new Error("User Already Exists");
//   }
// });

// 1 @DES REGISTER API  - > tested 
// const createUser = asyncHandler(async (req, res) => {
exports.registerUser = asyncHandler(async (req, res) => {
  
  try {
    const { firstname, lastname, email, mobile, password } = req.body;
    // Check if all required fields are provided
    const requiredFields = [
      "firstname",
      "lastname",
      "email",
      "mobile",
      "password",
    ];
    const missingFeilds = requiredFields.filter(feild => !(feild in req.body));
    if (missingFeilds.length > 0) {
      return res.status(400).json({
        success: false,
        message: `Please provide ${missingFeilds.join(", ")}`,
      });
    }

    const existUser = await User.findOne({ email });
    if (existUser) {
      res.status(404).json({
        success:false,
        message:"Email Already Exist"
      })
     
      }

    // Create a new user
    const user = await User.create({
      firstname,
      lastname,
      email,
      mobile,
      password,
    });

    await user.save();
    const token = jwtToken.generateJWT(user._id);
    // Respond with success message and user data
    res.status(200).json({
      success: true,
      message: "User register successfully...",
      user,
      token,
    });
  } catch (error) {
    throw new Error("Internal server error")
    
  }
});

// 2 DES LOGIN API  tested
exports.loginUser = async (req, res, next) => {
  const { email, password } = req.body;
  //  check user exist or not
  const user = await User.findOne({ email });
  if (user && (await user.isPasswordMatched(password))) {
    const refreshToken = await generateRefreshToken(user?._id);
    const updateUser = await User.findByIdAndUpdate(
      user.id,
      {
        refreshToken: refreshToken,
      },
      { new: true }
    );
    res.cookie("refreshToken", refreshToken, {
      httpOnly: true,
      maxAge: 72 * 60 * 60 * 1000,
    });
    res.status(200).json({
      success: true,
      _id: user?.id,
      firstname: user?.firstname,
      lastname: user.lastname,
      email: user.email,
      password: user.password,
      mobile: user.mobile,
      token: jwtToken.generateJWT(user._id),
    });
  } else {
    res.status(500).json({
      success:false,
      message:"Invalid Credentials"
    })
  }
};

// 3 ADMIN LOGIN API  -> tested
exports.adminLogin = async (req, res, next) => {
  try {
    const { email, password } = req.body;
    const findAdmin = await User.findOne({ email });
    if (findAdmin.role !== "admin") {
      return res.status(400).json({ error: "Not Authorized.." });
    }
    if (findAdmin && (await findAdmin.isPasswordMatched(password))) {
      const refreshToken = await generateRefreshToken(findAdmin?._id);
      const updateuser = await User.findByIdAndDelete(
        findAdmin.id,
        {
          refreshToken: refreshToken,
        },
        {
          new: true,
        }
      );
      res.cookie("refreshToken", refreshToken, {
        httpOnly: true,
        maxAge: 72 * 60 * 60 * 1000,
      });

      res.status(200).json({
        
        _id: findAdmin?.id,
        firstname: findAdmin?.firstname,
        lastname: findAdmin?.lastname,
        email: findAdmin?.email,
        mobile: findAdmin?.mobile,
        token: jwtToken.generateJWT(findAdmin?._id),
      });
    }
  } catch (error) {
    return res.status(500).json({ error: "Internal Server Error" });
  }
};

// 4  HANDLE REFRESH TOKEN API
exports.handleRefreshToken = async (req, res, next) => {
  const cookie = req.cookies;
  if (!cookie?.refreshToken) {
    res.status(400).json({ message: "No Refresh Token in Cookies" });
  }
  const refreshToken = cookie.refreshToken;
  const user = await User.findOne({ refreshToken });

  if (!user) {
    res
      .status(400)
      .json({ message: "No refresh token present in db or not matched" });
  }
  jwt.verify(refreshToken, process.env.JWT_SECRET, (err, decoded) => {
    res
      .status(400)
      .json({ message: "There is something wrong with refresh token" });
  });
  const accessToken = generateRefreshToken(user?._id);
  res.status(200).json({
    success: true,
    accessToken,
  });
};

// 5 @DES GET ALL USERS API  -> tested
exports.getAllUser = async (req, res, next) => {
  try {
    const user = await User.find();
    if (!user || user.length === 0) {
      return next(new ErrorHandler("User not found", 401));
    }
    res.status(200).json({
      status: true,
      users: user,
    });
  } catch (error) {
    return next(new ErrorHandler("Server error", 500));
  }
};

// 6 DES GET USER DETAILS API  -> tested
exports.getUserDetails = async (req, res, next) => {
  try {
    const user = await User.findById(req.params.id);
    if (!user) {
      return res.status(404).json({ error: "User not found" });
    }
    res.status(200).json({
      status: true,
      user,
    });
  } catch (error) {
    return res.status(500).json({ error: "Internal Server Error" });
  }
};

// 7 DES DELETE USER API   -> tested
exports.deleteUser = asyncHandler(async (req, res) => {
  const {id} = req.params;
  validateMongoDbId(id)
  try {
   
    const user = await User.findByIdAndDelete(id);
    if (!user) {
      return next(new ErrorHandler("User not found for the specified id", 404));
    }
    res.status(200).json({
      success: true,
      deletedUser:user,
      message: "User deleted successfully!!",
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: "Internal Server Error",
    });
  }
});

// 8 DES UPDATE USER API  -> tested
exports.updateUser =  asyncHandler(async (req, res) => {
  const { id } = req.params;
  validateMongoDbId(id);

  try {
    const updatedUser = await User.findByIdAndUpdate(
      id,
      {
        firstname: req?.body?.firstname,
        lastname: req?.body?.lastname,
        email: req?.body?.email,
        mobile: req?.body?.mobile,
      },
      {
        new: true,
      }
    );
    res.json({
      success:true,
      message:"Updated User",
      updatedUser
    });
  } catch (error) {
    throw new Error(error);
  }
});
// """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""1.11.11
// 7 DES BLOCK USER API
exports.blockUser = async (req, res, next) => {
  try {
    // Check if the user to be blocked exists
    const userId = req.params;
    const user = await User.findById(userId);

    if (!user) {
      return next(new ErrorHandler("User not found", 404));
    }
    // Check if the user is already blocked
    if (user.isBlocked) {
      return next(new ErrorHandler("User is already blocked", 400));
    }

    // Block the user
    user.isBlocked = true;
    await user.save();

    res.status(200).json({
      status: true,
      message: "User has been blocked successfully",
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: "Internal Server Error",
    });
  }
};

//8 DES UNBLOCK USER API
exports.unBlockUser = async (req, res, next) => {
  try {
    // Check if the user to be blocked exists
    const userId = req.params;
    const user = await User.findById(userId);
    if (!user) {
      return next(new ErrorHandler("User not found", 404));
    }
    // Check if the user is already blocked
    if (user.isBlocked) {
      return next(new ErrorHandler("User is already blocked", 400));
    }
    // Block the user
    user.isBlocked = false;
    await user.save();
    res.status(200).json({
      status: true,
      message: "User has been unblocked successfully",
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: "Internal Server Error",
    });
  }
};

// 9 FORGOT PASSWORD API
exports.forgotPassword = async (req, res, next) => {
  const user = await  User.findOne({
    email:req.body.email
  });
  if(!user){
    res.status(404).json({
      success:false,
      message:"User not found"
  })
  }
  const resetToken = user.getResetPasswordToken();

  await user.save({
    validateBeforeSave:false
  })
  const message = `your password reset token is : - \n \n ${resetPasswordUrl} \n \n If you have not requested then ignore it ! `;
   try {
    await sendEmail({
      email:user.email,
      subject:`ecommerce web password recovery`,
      message:message
    });
    res.status(200).json(200).json({
      success:true,
      message:`email send to ${user.email} successfully`
    });
   } catch (error) {
    user.resetPasswordToken = undefined;
    user.resetPasswordExpire = undefined;
    
    await user.save({
      validateBeforeSave:false
    });
    res.status(500).json({
      success:false,
      error:"server error"
    })
   }
};

// reset password 
exports.resetPassword = async(req, res, next) => {
const resetPasswordToken = crypto.createHash("sha256").update(req.params.token).digest("hex");

const user = await User.findOne({
  resetPasswordToken,
  resetPasswordExpire:{
    $gt:Date.now()
  }
});
if(!user) {
  res.status(200).json({
    success:false,
    message:"Reset Password Token is invalid or has been expired"
  })
}
if(req.body.password !== req.body.confirmPassword){
  res.status(200).json({
    success:false,
    message:"Password does not password"
  })
}

user.password = req.body.password;
user.resetPasswordToken= undefined;
user.resetPasswordExpire= undefined;
await user.save();

}

// 10 UPDATE PASSWORD API
exports.updatePassword = async (req, res, next) => {
  const { _id } = req.params;
  validateMongoDbId(_id);
  try {
    const user = await User.findById(_id);
    if (password) {
      user.password = password;
      const updatedPassword = await user.save();

      res.status(200).json({
        success: true,
        updatedPassword,
      });
    } else {
      res.status(200).json({
        success: true,
        user,
      });
    }
  } catch (error) {
    res.status(500).json({
      success: false,
      message: "Internal Server Error",
    });
  }
};



// 13 LOGOUT API
exports.userLogout = async (req, res, next) => {
  const cookie = req.cookies;
  if (!cookie?.refreshToken) {
    res.status(400).json({
      success: false,
      message: "No refresh token in cookies",
    });
  }

  const refreshToken = cookie.refreshToken;
  const user = await User.findOne({ refreshToken });

  if (!user) {
    res.clearCookie("refreshToken", {
      httpOnly: true,
      secure: true,
    });
    return res.sendStatus(204); // forbidden
  }
  await User.findOneAndDelete(refreshToken, {
    refreshToken: "",
  });
  res.clearCookie("refreshToken", {
    httpOnly: true,
    secure: true,
  });
  res.sendStatus(204); // forbidden
};

// 14 SAVE ADDRESS API
exports.saveAddress = async (req, res, next) => {
  const { _id } = req.params;
  validateMongoDbId(_id);
  try {
    const user = await User.findByIdAndUpdate(
      _id,
      {
        address: req?.body?.address,
      },
      {
        new: true,
      }
    );
    res.status(200).join({
      success: true,
      user,
    });
  } catch (error) {
    res.status(500).join({
      success: true,
      error: "Internal server error",
    });
  }
};

// 15 GET USER WISH LIST API
exports.userWishlist = async (req, res, next) => {
  const { _id } = req.user;
  try {
    const wishlist = await User.findById(_id).populate("wishlist");
    if (!wishlist) {
      res.status(404).json({
        success: false,
        message: "Not added product in wishlist",
      });
    }
    res.status(200).json({
      success: true,
      wishlist: wishlist,
    });
  } catch (error) {
    res.status(500).join({
      success: false,
      error: "Internal server error",
    });
  }
};

// 16 ADD PRODUCT CART API
exports.addToCart = async (req, res, next) => {
  const { cart } = req.body;
  const { _id } = req.user;
  validateMongoDbId(_id);

  try {
    let products = [];
    const user = await User.findById(_id);
    // check if already have product in cart
    const alreadyExistCart = await Cart.findOne({ orderby: user._id });
    if (alreadyExistCart) {
      alreadyExistCart.remove();
    }
    for (let i = 0; i < cart.length; i++) {
      let object = {};
      object.product = cart[i]._id;
      object.count = cart[i].count;
      object.color = cart[i].color;
      let getPrice = await Product.findById(cart[i]._id).select("price").exac();
      object.price = getPrice.price;
      products.push(object);
    }
    let cartTotal = 0;
    for (let i = 0; i < products.length; i++) {
      cartTotal = cartTotal + products[i].price * products[i].count;
    }
    let newCart = await new Cart({
      products,
      cartTotal,
      orderby: user?._id,
    }).save();
    res.status(200).json({
      success: true,
      carts: newCart,
    });
  } catch (error) {
    res.status(500).join({
      success: true,
      error: "Internal server error",
    });
  }
};

// 17 GET ALL CART API
exports.getUserCart = async (req, res, next) => {
  const { _id } = req.user;
  validateMongoDbId(_id);

  try {
    const cart = await Cart.findOne({ orderby: _id }).populate(
      "products.product"
    );
    if (!cart) {
      res.status(404).join({
        success: false,
        message: "Cart is empty...",
      });
    }
    res.status(200).join({
      success: true,
      cart: cart,
    });
  } catch (error) {
    res.status(500).join({
      success: false,
      error: "Internal server error",
    });
  }
};

// 18 EMPTY CART API
exports.emptyCart = async (req, res, next) => {
  const { _id } = req.user;
  validateMongoDbId(_id);
  try {
    const user = await User.findOne({ _id });
    const cart = await Cart.findOneAndDelete({ orderby: user._id });
    res.status(200).join({
      success: true,
      cart,
    });
  } catch (error) {
    res.status(500).join({
      success: false,
      error: "Internal server error",
    });
  }
};

// wrap in try catch
// const applyCoupon = async (req, res) => {
//   try {
//     const { coupon } = req.body;
//     const { _id } = req.user;
//     validateMongoDbId(_id);

//     // Find the coupon in the database
//     const validCoupon = await Coupon.findOne({ name: coupon });
//     if (!validCoupon) {
//       return res.status(400).json({ error: "Invalid Coupon" });
//     }

//     // Find the user's cart
//     const userCart = await Cart.findOne({ orderby: _id }).populate("products.product");
//     if (!userCart) {
//       return res.status(400).json({ error: "Cart not found" });
//     }

//     // Calculate the total after applying the discount
//     const cartTotal = userCart.products.reduce((total, item) => {
//       return total + item.product.price * item.quantity;
//     }, 0);
//     const totalAfterDiscount = (cartTotal - (cartTotal * validCoupon.discount) / 100).toFixed(2);

//     // Update the cart with the new totalAfterDiscount
//     await Cart.findOneAndUpdate(
//       { orderby: _id },
//       { totalAfterDiscount },
//       { new: true }
//     );

//     res.json({ totalAfterDiscount });
//   } catch (error) {
//     console.error("Error in applyCoupon:", error);
//     res.status(500).json({ error: "Internal Server Error" });
//   }
// };

// 19  APPLY COUPON CODE API
exports.applyCoupon = async (req, res, next) => {
  const { coupon } = req.body;
  const { _id } = req.user;
  validateMongoDbId(_id);
  // Find the coupon in the database
  const validateCoupon = await Coupon.findOne({ name: coupon });
  if (!validateCoupon) {
    return res.status(400).json({ error: "Invalid Coupon" });
  }
  const user = await User.findOne({ _id });
  let { cartTotal } = await Cart.findOne({ orderby: user._id }).populate(
    "products.product"
  );

  let totalAfterDiscount = (
    cartTotal -
    (cartTotal * validateCoupon.discount) / 100
  ).toFixed(2);

  await Cart.findByIdAndUpdate(
    { orderby: user._id },
    { totalAfterDiscount },
    { new: true }
  );
  res.status(200).json({
    success: true,
    totalAfterDiscount,
  });
};

// 20 CREATE ORDER API
exports.createOrder = async (req, res, next) => {
  const { COD, couponApplied } = req.body;
  const { _id } = req.user;
  validateMongoDbId(_id);

  try {
    if (!COD) {
      return res.status(400).json({ error: "Create cash order failed" });
    }
    const user = await User.findById(_id);
    let userCart = await Cart.findOne({ orderby: user._id });
    let finalAmout = 0;
    if (couponApplied && userCart.totalAfterDiscount) {
      finalAmout = userCart.totalAfterDiscount;
    } else {
      finalAmout = userCart.cartTotal;
    }

    let newOrder = await new Order({
      paymentIntent: {
        id: uniqid(),
        method: "COD",
        amount: finalAmout,
        status: "Cash On Delivery",
        created: Date.now(),
        currency: "usd",
      },
      orderby: user._id,
      orderStatus: "Cash On Delivery",
    }).save();

    let update = userCart.products.map((item) => {
      return {
        updateOne: {
          filter: { _id: item.product._id },
          update: { $inc: { quantity: -item.count, sold: +item.count } },
        },
      };
    });
    const updated = await Product.bulkWrite(update, {});

    res.status(200).json({
      success: true,
      updated,
    });
  } catch (error) {
    res.status(500).join({
      success: false,
      error: "Internal server error",
    });
  }
};

// 21 GET ORDERS API

exports.getOrders = async (req, res, next) => {
  const { _id } = req.user;
  validateMongoDbId(_id);
  try {
    const orders = await Order.findOne({ orderby: _id })
      .populate("products.product")
      .populate("orderby")
      .exac();
    res.status(200).json({
      orders,
    });
  } catch (error) {
    res.status(500).join({
      success: false,
      error: "Internal server error",
    });
  }
};

// 22 GET ALL USERS ORDERS API

exports.getAllOrders = async (req, res, next) => {
  try {
    const allusersOrders = await Order.find()
      .populate("products.product")
      .populate("orderby")
      .exac();
    res.status(200).join({
      success: true,
      allusersOrders,
    });
  } catch (error) {
    res.status(500).join({
      success: false,
      error: "Internal server error",
    });
  }
};

// 23 GET ORDER BY USER ID API
exports.getOrderByUserId = async (req, res, next) => {
  const { id } = req.params;
  validateMongoDbId(id);
  try {
    const userorders = await Order.findOne({ orderby: id })
      .populate("products.product")
      .populate("orderby")
      .exac();
    res.status(200).join({
      success: true,
      userorders,
    });
  } catch (error) {
    res.status(500).join({
      success: false,
      error: "Internal server error",
    });
  }
};

// 24 UPDATE ORDER STATUS USER ID API
exports.updateOrderStatus = async (req, res, next) => {
  const { status } = req.body;
  const { id } = req.params;
  validateMongoDbId(id);

  try {
    const updateOrderStatus = await Order.findByIdAndUpdate(
      id,
      {
        orderStatus: status,
        paymentIntent: { status: status },
      },
      {
        new: true,
      }
    );
    res.status(200).json({
      success: true,
      updateOrderStatus,
    });
  } catch (error) {
    res.status(500).join({
      success: false,
      error: "Internal server error",
    });
  }
};
